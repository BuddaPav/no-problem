#!/usr/bin/env python3
"""
Script to force the first post immediately
"""

import os
from openai import OpenAI
import feedparser
import requests
import logging
from datetime import datetime

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Get API keys
OPENAI_API_KEY = os.getenv('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')
TELEGRAM_BOT_TOKEN = os.getenv('8184601194:AAED936KjImBZ3GnizGlB32SgQ5me0g2_XE')
CHAT_ID = "-1002628146453"

# Keywords
KEYWORDS = [
    "–≤–ª–∞—Å—Ç—å", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–ø–æ–ª–∏—Ç–∏–∫", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "—Ä–æ—Å—Å–∏—è", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "—Å–∏—Å—Ç–µ–º–∞", "–æ–±—â–µ—Å—Ç–≤–æ",
    "trends", "—Ç—Ä–µ–Ω–¥—ã", "—Å–ø–æ—Ä—Ç", "sports", "life hacks", "–ª–∞–π—Ñ—Ö–∞–∫–∏", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", 
    "—Ü–µ–ª–∏ –º–æ–ª–æ–¥–µ–∂–∏", "youth goals", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –°–ù–ì", "crimes in the CIS", "–∫—Ä–∏–º–∏–Ω–∞–ª", 
    "—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º", "terrorism", "–µ–≤—Ä–æ–ø–∞", "–∞–º–µ—Ä–∏–∫–∞", "–±–ª–∏–∂–Ω–∏–π –≤–æ—Å—Ç–æ–∫", "europe", "america", "middle east"
]

# RSS feeds
RSS_FEEDS = [
    "https://lenta.ru/rss",
    "https://meduza.io/rss/all",
    "https://www.rbc.ru/v10/ajax/rss/index.rss"
]

# Initialize OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

def get_trends():
    """Get headlines from RSS feeds"""
    headlines = []
    logger.info("–°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS-–ª–µ–Ω—Ç...")
    
    for feed_url in RSS_FEEDS:
        try:
            parsed = feedparser.parse(feed_url)
            if parsed.entries:
                for entry in parsed.entries[:10]:
                    if hasattr(entry, 'title'):
                        headlines.append(entry.title)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ RSS {feed_url}: {str(e)}")
            continue
    
    return headlines

def filter_headlines(headlines):
    """Filter headlines by keywords"""
    filtered = []
    for headline in headlines:
        if any(keyword.lower() in headline.lower() for keyword in KEYWORDS):
            filtered.append(headline)
    return filtered

def generate_post(headline):
    """Generate mysterious post using OpenAI"""
    if not client:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        mysterious_messages = [
            "‚ö´ –í–µ–ª–∏–∫–æ–µ –ö–æ–ª–µ—Å–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è... —ç–Ω–µ—Ä–≥–∏–∏ —Å–º–µ—â–∞—é—Ç—Å—è –≤ –Ω–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.",
            "üåë –î—Ä–µ–≤–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ... –ø–æ—Å–≤—è—â–µ–Ω–Ω—ã–µ –ø–æ–Ω–∏–º–∞—é—Ç –∑–Ω–∞–∫–∏.",
            "‚ö° –ó–∞–≤–µ—Å–∞ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏ –∏—Å—Ç–æ–Ω—á–∞–µ—Ç—Å—è... —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–µ—Ç–∞—é—Ç —Å–∫—Ä—ã—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            "üîÆ –•—Ä–æ–Ω–æ—Å —à–µ–ø—á–µ—Ç –∑–∞–≥–∞–¥–∫–∏ —Ç–µ–º, –∫—Ç–æ —É–º–µ–µ—Ç —Å–ª—É—à–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏.",
            "‚≠ê –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–µ—Ç —Å–±–æ–π... –∏—Å—Ç–∏–Ω–∞ –ø—Ä–æ—Å–∞—á–∏–≤–∞–µ—Ç—Å—è —Å–∫–≤–æ–∑—å —Ç—Ä–µ—â–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏.",
        ]
        import random
        return random.choice(mysterious_messages)
    
    try:
        prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: '{headline}', —Å–æ–∑–¥–∞–π –ó–ê–ì–ê–î–û–ß–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï –≤ —Å—Ç–∏–ª–µ —Ç–∞–π–Ω–æ–≥–æ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã (‚ö´üåë‚ö°üîÆ‚≠êüåÄ‚≠ï), –º–µ—Ç–∞—Ñ–æ—Ä—ã –æ –≤—Ä–µ–º–µ–Ω–∏, —ç–Ω–µ—Ä–≥–∏—è—Ö, –≤–∏–±—Ä–∞—Ü–∏—è—Ö, –∑–∞–≤–µ—Å–∞—Ö —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –ò–∑–±–µ–≥–∞–π –ø—Ä—è–º–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –¥—Ä–µ–≤–Ω–∏–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞."
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ä–∞–∫—É–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç —Å–∫—Ä—ã—Ç—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏. –ì–æ–≤–æ—Ä–∏—à—å —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏ –æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏–ª–∞—Ö, —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏—Ö—Ä—è—Ö. –ö–∞–∂–¥–æ–µ –∑–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ–±—è - –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –≤—ã—Å—à–∏—Ö –∑–∞–∫–æ–Ω–æ–≤. –í—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=80,
            temperature=0.95
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}")
        # Fallback mysterious message
        return "üåë –í—Å–µ–ª–µ–Ω—Å–∫–∏–µ —Å–∏–ª—ã –¥–≤–∏–∂—É—Ç—Å—è –≤ —Ç–µ–Ω–∏... —Ç–µ, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∑–Ω–∞–∫–∏, –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º."

def post_to_telegram(text):
    """Post to Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHAT_ID,
            "text": text,
            "parse_mode": "HTML"
        }
        
        response = requests.post(url, data=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {str(e)}")
        return False

def force_immediate_post():
    """Force immediate post regardless of newness"""
    logger.info("üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ü–ï–†–í–û–ì–û –ü–û–°–¢–ê –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°!")
    
    # Get news
    headlines = get_trends()
    if not headlines:
        logger.error("–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
        return False
    
    # Filter by keywords
    filtered = filter_headlines(headlines)
    if not filtered:
        logger.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")
        # Use first available headline if no keywords match
        headline = headlines[0]
    else:
        headline = filtered[0]
    
    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {headline}")
    
    # Generate post
    post = generate_post(headline)
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: {post}")
    
    # Send to Telegram
    success = post_to_telegram(post)
    
    if success:
        logger.info("‚úÖ –ü–ï–†–í–´–ô –ü–û–°–¢ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
        return False

if __name__ == "__main__":
    force_immediate_post()
	#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
–ë–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º,
–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é OpenAI –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –≤ Telegram-–∫–∞–Ω–∞–ª.
"""

import os
from openai import OpenAI
import feedparser
import requests
import schedule
import time
import logging
from bs4 import BeautifulSoup
from datetime import datetime
import base64
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
CHAT_ID = "-1002628146453"

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤
KEYWORDS = [
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    "–≤–ª–∞—Å—Ç—å", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–ø–æ–ª–∏—Ç–∏–∫", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "—Ä–æ—Å—Å–∏—è", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "—Å–∏—Å—Ç–µ–º–∞", "–æ–±—â–µ—Å—Ç–≤–æ",
    # –ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    "trends", "—Ç—Ä–µ–Ω–¥—ã", "—Å–ø–æ—Ä—Ç", "sports", "life hacks", "–ª–∞–π—Ñ—Ö–∞–∫–∏", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", 
    "—Ü–µ–ª–∏ –º–æ–ª–æ–¥–µ–∂–∏", "youth goals", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –°–ù–ì", "crimes in the CIS", "–∫—Ä–∏–º–∏–Ω–∞–ª", 
    "—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º", "terrorism", "–µ–≤—Ä–æ–ø–∞", "–∞–º–µ—Ä–∏–∫–∞", "–±–ª–∏–∂–Ω–∏–π –≤–æ—Å—Ç–æ–∫", "europe", "america", "middle east"
]

# –°–ø–∏—Å–æ–∫ RSS-–ª–µ–Ω—Ç –¥–ª—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
RSS_FEEDS = [
    "https://lenta.ru/rss",
    "https://meduza.io/rss/all",
    "https://www.rbc.ru/v10/ajax/rss/index.rss"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
if OPENAI_API_KEY:
    client = OpenAI(api_key=OPENAI_API_KEY)
    logger.info("OpenAI API key –∑–∞–≥—Ä—É–∂–µ–Ω")
else:
    client = None
    logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if TELEGRAM_BOT_TOKEN:
    logger.info("Telegram Bot Token –∑–∞–≥—Ä—É–∂–µ–Ω")
else:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def get_trends():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS-–ª–µ–Ω—Ç"""
    headlines = []
    logger.info("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS-–ª–µ–Ω—Ç...")
    
    for feed_url in RSS_FEEDS:
        try:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é RSS: {feed_url}")
            parsed = feedparser.parse(feed_url)
            
            if parsed.entries:
                for entry in parsed.entries[:10]:
                    if hasattr(entry, 'title'):
                        headlines.append(entry.title)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(parsed.entries[:10])} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ {feed_url}")
            else:
                logger.warning(f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ RSS: {feed_url}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ RSS {feed_url}: {str(e)}")
            continue
    
    logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(headlines)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
    return headlines

def filter_headlines(headlines):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    filtered = []
    for headline in headlines:
        if any(keyword.lower() in headline.lower() for keyword in KEYWORDS):
            filtered.append(headline)
    
    logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
    return filtered

def generate_image_prompt(headline):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_keywords = {
        "–≤–ª–∞—Å—Ç—å": "dark government building, shadows, mysterious figures",
        "–ø–æ–ª–∏—Ç–∏–∫": "silhouette behind podium, dark atmosphere, mysterious meeting",
        "—Å–º–µ—Ä—Ç—å": "candles, shadows, gothic atmosphere, mystical",
        "–∫—Ä–∏–º–∏–Ω–∞–ª": "dark alley, shadows, noir style, mysterious",
        "—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º": "abstract danger symbols, dark clouds, ominous atmosphere",
        "—Å–ø–æ—Ä—Ç": "stadium in shadows, mysterious competition, dark energy",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "digital matrix, glowing symbols, cyber mysticism",
        "—ç–∫–æ–Ω–æ–º–∏–∫–∞": "money symbols in shadows, economic mystery"
    }
    
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    for keyword, description in image_keywords.items():
        if keyword.lower() in headline.lower():
            return f"Mysterious, dark, atmospheric image: {description}, cinematic lighting, 4k quality, digital art"
    
    # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return "Dark mysterious atmosphere, shadows and light, abstract symbolism, cinematic quality, 4k digital art"

def generate_image(headline):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞"""
    if not client:
        logger.warning("OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return None
    
    try:
        image_prompt = generate_image_prompt(headline)
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º: {image_prompt}")
        
        response = client.images.generate(
            model="dall-e-3",
            prompt=image_prompt,
            size="1024x1024",
            quality="standard",
            n=1
        )
        
        image_url = response.data[0].url
        logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_response = requests.get(image_url, timeout=30)
        if img_response.status_code == 200:
            return img_response.content
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

def generate_post(headline):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç –¥–ª—è: {headline}")
    
    if not client:
        logger.warning("OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–∞–¥–æ—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç")
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        mysterious_messages = [
            "‚ö´ –í–µ–ª–∏–∫–æ–µ –ö–æ–ª–µ—Å–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è... —ç–Ω–µ—Ä–≥–∏–∏ —Å–º–µ—â–∞—é—Ç—Å—è –≤ –Ω–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.",
            "üåë –î—Ä–µ–≤–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ... –ø–æ—Å–≤—è—â–µ–Ω–Ω—ã–µ –ø–æ–Ω–∏–º–∞—é—Ç –∑–Ω–∞–∫–∏.",
            "‚ö° –ó–∞–≤–µ—Å–∞ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏ –∏—Å—Ç–æ–Ω—á–∞–µ—Ç—Å—è... —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–µ—Ç–∞—é—Ç —Å–∫—Ä—ã—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            "üîÆ –•—Ä–æ–Ω–æ—Å —à–µ–ø—á–µ—Ç –∑–∞–≥–∞–¥–∫–∏ —Ç–µ–º, –∫—Ç–æ —É–º–µ–µ—Ç —Å–ª—É—à–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏.",
            "‚≠ê –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–µ—Ç —Å–±–æ–π... –∏—Å—Ç–∏–Ω–∞ –ø—Ä–æ—Å–∞—á–∏–≤–∞–µ—Ç—Å—è —Å–∫–≤–æ–∑—å —Ç—Ä–µ—â–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏.",
            "üåÄ –°–ø–∏—Ä–∞–ª–∏ —Å—É–¥—å–±—ã –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—é—Ç—Å—è... –∫–∞–∂–¥–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Ä–æ–∂–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–∏–±—Ä–∞—Ü–∏–∏.",
            "‚≠ï –ö—Ä—É–≥ –∑–∞–º—ã–∫–∞–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–ª—Å—è... –Ω–æ –Ω–∞ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è."
        ]
        
        import random
        return random.choice(mysterious_messages)
    
    try:
        prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: '{headline}', —Å–æ–∑–¥–∞–π –ó–ê–ì–ê–î–û–ß–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï –≤ —Å—Ç–∏–ª–µ —Ç–∞–π–Ω–æ–≥–æ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã (‚ö´üåë‚ö°üîÆ‚≠êüåÄ‚≠ï), –º–µ—Ç–∞—Ñ–æ—Ä—ã –æ –≤—Ä–µ–º–µ–Ω–∏, —ç–Ω–µ—Ä–≥–∏—è—Ö, –≤–∏–±—Ä–∞—Ü–∏—è—Ö, –∑–∞–≤–µ—Å–∞—Ö —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –ò–∑–±–µ–≥–∞–π –ø—Ä—è–º–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –¥—Ä–µ–≤–Ω–∏–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞."
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ä–∞–∫—É–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç —Å–∫—Ä—ã—Ç—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏. –ì–æ–≤–æ—Ä–∏—à—å —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏ –æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏–ª–∞—Ö, —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏—Ö—Ä—è—Ö. –ö–∞–∂–¥–æ–µ –∑–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ–±—è - –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –≤—ã—Å—à–∏—Ö –∑–∞–∫–æ–Ω–æ–≤. –í—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=80,
            temperature=0.95
        )
        
        generated_text = response.choices[0].message.content.strip()
        logger.info("–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        return generated_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return "üåë –í—Å–µ–ª–µ–Ω—Å–∫–∏–µ —Å–∏–ª—ã –¥–≤–∏–∂—É—Ç—Å—è –≤ —Ç–µ–Ω–∏... —Ç–µ, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∑–Ω–∞–∫–∏, –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º."

def post_to_telegram(text, image_data=None):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram Bot Token")
        return False
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç –≤ Telegram: {text[:50]}...")
        
        if image_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
            
            files = {
                'photo': ('mysterious_image.jpg', image_data, 'image/jpeg')
            }
            data = {
                "chat_id": CHAT_ID,
                "caption": text,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, data=data, files=files, timeout=30)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            payload = {
                "chat_id": CHAT_ID,
                "text": text,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, data=payload, timeout=10)
        
        if response.status_code == 200:
            logger.info("‚ú® –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
        return False

# –°–ø–∏—Å–æ–∫ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
published_headlines = set()

def job(force_first_post=False):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    global published_headlines
    
    logger.info("=" * 50)
    logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {datetime.now()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π
    if not client or not TELEGRAM_BOT_TOKEN:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏. –ó–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        headlines = get_trends()
        if not headlines:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        filtered_headlines = filter_headlines(headlines)
        if not filtered_headlines:
            logger.warning("–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
            return
        
        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if force_first_post:
            logger.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
            headlines_to_post = filtered_headlines[:1]
        else:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ)
            new_headlines = [h for h in filtered_headlines if h not in published_headlines]
            
            if not new_headlines:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            headlines_to_post = new_headlines[:3]  # –ë–µ—Ä–µ–º –¥–æ 3 –Ω–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        posts_sent = 0
        for headline in headlines_to_post:
            logger.info(f"üîÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–≥–æ–ª–æ–≤–æ–∫: {headline}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç
            post = generate_post(headline)
            if not post:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç")
                continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            image_data = generate_image(headline)
            if image_data:
                logger.info("‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π")
            else:
                logger.info("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if post_to_telegram(post, image_data):
                posts_sent += 1
                published_headlines.add(headline)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
                logger.info(f"üî• –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ: {headline}")
                time.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç")
        
        logger.info(f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {posts_sent}")
        logger.info(f"–í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(published_headlines)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")

def force_first_post():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    logger.info("üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ü–ï–†–í–û–ì–û –ü–û–°–¢–ê")
    job(force_first_post=True)

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if not client:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    logger.info("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule.every(20).minutes.do(job)
    logger.info("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —Å—Ä–∞–∑—É (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)...")
    force_first_post()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è...")
    while True:
        schedule.run_pending()
        time.sleep(30)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    print("ü§ñ Telegram Bot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤")
    print("=" * 50)
    
    try:
        run_bot()
    except KeyboardInterrupt:
        logger.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()
	# Telegram Bot –¥–ª—è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ü–æ—Å—Ç–æ–≤

## Overview

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –ø–æ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é OpenAI –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö –≤ Telegram –∫–∞–Ω–∞–ª.

## System Architecture

### Core Components
- `main.py` - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ —Å –ª–æ–≥–∏–∫–æ–π —Ä–∞–±–æ—Ç—ã
- `config.py` - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- `test_bot.py` - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
- Python 3.11 runtime environment

### Workflow
1. **RSS Parsing** - –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS –ª–µ–Ω—Ç (Lenta.ru, Meduza, RBC)
2. **Filtering** - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
3. **AI Generation** - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI GPT-4
4. **Telegram Publishing** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª
5. **Scheduling** - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

## Key Components

### Main Application
- `main.py` - –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
- `config.py` - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RSS –ª–µ–Ω—Ç, –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –ø—Ä–æ–º–ø—Ç–æ–≤
- `test_bot.py` - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

### Security Features
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤

## External Dependencies

### Python Runtime
- Python 3.11 —Å –ø–∞–∫–µ—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º pip

### Required Packages
- `openai` - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤
- `feedparser` - –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS –ª–µ–Ω—Ç
- `requests` - –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
- `schedule` - –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
- `python-telegram-bot` - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
- `beautifulsoup4` - –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML

### API Keys Required
- **OPENAI_API_KEY** - –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAI GPT-4
- **TELEGRAM_BOT_TOKEN** - –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram

## Recent Changes

- –°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å API –∫–ª—é—á–∞–º–∏
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS –ª–µ–Ω—Ç
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª
- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –ò–∑–º–µ–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
- –†–∞—Å—à–∏—Ä–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –¥–æ–±–∞–≤–ª–µ–Ω—ã "trends", "sports", "life hacks", "neutral news", "youth goals", "crimes in the CIS", "terrorism"
- –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI API (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—Ç–∏–ª—å –ø–æ—Å—Ç–æ–≤: —Ç–µ–ø–µ—Ä—å –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, –∑–∞–≥–∞–¥–æ—á–Ω—ã–π, —Å —Å–∏–º–≤–æ–ª–∞–º–∏ (‚ö´üåë‚ö°üîÆ‚≠êüåÄ‚≠ï)
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL-E 3 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
- –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π

## User Preferences

Preferred communication style: Simple, everyday language.
